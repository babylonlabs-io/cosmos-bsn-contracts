{
  "contract_name": "btc-finality",
  "contract_version": "0.18.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "properties": {
      "admin": {
        "type": [
          "string",
          "null"
        ]
      },
      "finality_activation_height": {
        "type": [
          "integer",
          "null"
        ],
        "format": "uint64",
        "minimum": 0.0
      },
      "jail_duration": {
        "type": [
          "integer",
          "null"
        ],
        "format": "uint64",
        "minimum": 0.0
      },
      "max_active_finality_providers": {
        "type": [
          "integer",
          "null"
        ],
        "format": "uint32",
        "minimum": 0.0
      },
      "min_pub_rand": {
        "type": [
          "integer",
          "null"
        ],
        "format": "uint64",
        "minimum": 0.0
      },
      "missed_blocks_window": {
        "type": [
          "integer",
          "null"
        ],
        "format": "uint64",
        "minimum": 0.0
      },
      "reward_interval": {
        "type": [
          "integer",
          "null"
        ],
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "babylon_finality execution handlers",
    "oneOf": [
      {
        "description": "Change the admin",
        "type": "object",
        "required": [
          "update_admin"
        ],
        "properties": {
          "update_admin": {
            "type": "object",
            "properties": {
              "admin": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Set the BTC staking addr. Only admin or the babylon contract can set this",
        "type": "object",
        "required": [
          "update_staking"
        ],
        "properties": {
          "update_staking": {
            "type": "object",
            "required": [
              "staking"
            ],
            "properties": {
              "staking": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Committing a sequence of public randomness for EOTS",
        "type": "object",
        "required": [
          "commit_public_randomness"
        ],
        "properties": {
          "commit_public_randomness": {
            "type": "object",
            "required": [
              "commitment",
              "fp_pubkey_hex",
              "num_pub_rand",
              "signature",
              "start_height"
            ],
            "properties": {
              "commitment": {
                "description": "Commitment of these public randomness values. Currently, it's the root of the Merkle tree that includes the public randomness",
                "allOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  }
                ]
              },
              "fp_pubkey_hex": {
                "description": "BTC PK of the finality provider that commits the public randomness",
                "type": "string"
              },
              "num_pub_rand": {
                "description": "Amount of public randomness committed",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "signature": {
                "description": "Signature on (start_height || num_pub_rand || commitment) signed by the SK corresponding to `fp_pubkey_hex`. This prevents others committing public randomness on behalf of `fp_pubkey_hex`",
                "allOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  }
                ]
              },
              "start_height": {
                "description": "Start block height of the list of public randomness",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Submit Finality Signature.\n\nThis is a message that can be called by a finality provider to submit their finality signature to the Consumer chain. The signature is verified by the Consumer chain using the finality provider's public key\n\nThis message is equivalent to the `MsgAddFinalitySig` message in the Babylon finality protobuf defs.",
        "type": "object",
        "required": [
          "submit_finality_signature"
        ],
        "properties": {
          "submit_finality_signature": {
            "type": "object",
            "required": [
              "block_hash",
              "fp_pubkey_hex",
              "height",
              "proof",
              "pub_rand",
              "signature"
            ],
            "properties": {
              "block_hash": {
                "$ref": "#/definitions/Binary"
              },
              "fp_pubkey_hex": {
                "type": "string"
              },
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "proof": {
                "$ref": "#/definitions/Proof"
              },
              "pub_rand": {
                "$ref": "#/definitions/Binary"
              },
              "signature": {
                "$ref": "#/definitions/Binary"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Unjails finality provider. Admin can unjail anyone anytime, others can unjail only themselves, and only if the jail period passed.",
        "type": "object",
        "required": [
          "unjail"
        ],
        "properties": {
          "unjail": {
            "type": "object",
            "required": [
              "fp_pubkey_hex"
            ],
            "properties": {
              "fp_pubkey_hex": {
                "description": "FP to unjail",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Proof": {
        "description": "Proof represents a Merkle proof. NOTE: The convention for proofs is to include leaf hashes but to exclude the root hash. This convention is implemented across IAVL range proofs as well. Keep this consistent unless there's a very good reason to change everything.  This also affects the generalized proof system as well.\n\nhttps://github.com/cometbft/cometbft/blob/d03254d3599b973f979314e6383b89fa1802e679/crypto/merkle/proof.go#L26",
        "type": "object",
        "required": [
          "aunts",
          "index",
          "leaf_hash",
          "total"
        ],
        "properties": {
          "aunts": {
            "description": "Hashes from leaf's sibling to a root's child.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Binary"
            }
          },
          "index": {
            "description": "Index of item to prove.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "leaf_hash": {
            "description": "Hash of item value.",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "total": {
            "description": "Total number of items.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Returns the current configuration of the btc-finality contract.",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the current admin of the contract.",
        "type": "object",
        "required": [
          "admin"
        ],
        "properties": {
          "admin": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the signature of the finality provider for a given block height.",
        "type": "object",
        "required": [
          "finality_signature"
        ],
        "properties": {
          "finality_signature": {
            "type": "object",
            "required": [
              "btc_pk_hex",
              "height"
            ],
            "properties": {
              "btc_pk_hex": {
                "type": "string"
              },
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the public random commitments for a given FP.",
        "type": "object",
        "required": [
          "pub_rand_commit"
        ],
        "properties": {
          "pub_rand_commit": {
            "type": "object",
            "required": [
              "btc_pk_hex"
            ],
            "properties": {
              "btc_pk_hex": {
                "description": "BTC public key of the finality provider, in hex format.",
                "type": "string"
              },
              "limit": {
                "description": "Maximum number of commitments to return.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "reverse": {
                "description": "An optional flag to return the commitments in reverse order",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "start_after": {
                "description": "Height of to start after (before, if `reverse` is `true`), or `None` to start from the beginning (end, if `reverse` is `true`).",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the first public random commitment (if any) for a given FP.\n\nIt's a convenience shortcut of `PubRandCommit` with a `limit` of 1, and `reverse` set to false.",
        "type": "object",
        "required": [
          "first_pub_rand_commit"
        ],
        "properties": {
          "first_pub_rand_commit": {
            "type": "object",
            "required": [
              "btc_pk_hex"
            ],
            "properties": {
              "btc_pk_hex": {
                "description": "BTC public key of the finality provider, in hex format.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "`LastPubRandCommit` returns the last public random commitment (if any) for a given FP.\n\nIt's a convenience shortcut of `PubRandCommit` with a `limit` of 1, and `reverse` set to true.",
        "type": "object",
        "required": [
          "last_pub_rand_commit"
        ],
        "properties": {
          "last_pub_rand_commit": {
            "type": "object",
            "required": [
              "btc_pk_hex"
            ],
            "properties": {
              "btc_pk_hex": {
                "description": "BTC public key of the finality provider, in hex format.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the indexed block information at height.",
        "type": "object",
        "required": [
          "block"
        ],
        "properties": {
          "block": {
            "type": "object",
            "required": [
              "height"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Return the list of indexed blocks.",
        "type": "object",
        "required": [
          "blocks"
        ],
        "properties": {
          "blocks": {
            "type": "object",
            "properties": {
              "finalised": {
                "description": "An optional filter to return only finalised blocks.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "limit": {
                "description": "Maximum number of blocks to return.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "reverse": {
                "description": "An optional flag to return the blocks in reverse order",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "start_after": {
                "description": "Height of the block to start after (before, if `reverse` is `true`), or `None` to start from the beginning (end, if `reverse` is `true`).",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the evidence for a given FP and block height.",
        "type": "object",
        "required": [
          "evidence"
        ],
        "properties": {
          "evidence": {
            "type": "object",
            "required": [
              "btc_pk_hex",
              "height"
            ],
            "properties": {
              "btc_pk_hex": {
                "type": "string"
              },
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the list of jailed finality providers",
        "type": "object",
        "required": [
          "jailed_finality_providers"
        ],
        "properties": {
          "jailed_finality_providers": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the set of active finality providers at a given height",
        "type": "object",
        "required": [
          "active_finality_providers"
        ],
        "properties": {
          "active_finality_providers": {
            "type": "object",
            "required": [
              "height"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the voting power of a given finality provider at a given height",
        "type": "object",
        "required": [
          "finality_provider_power"
        ],
        "properties": {
          "finality_provider_power": {
            "type": "object",
            "required": [
              "btc_pk_hex",
              "height"
            ],
            "properties": {
              "btc_pk_hex": {
                "type": "string"
              },
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the activated height of the BTC staking protocol",
        "type": "object",
        "required": [
          "activated_height"
        ],
        "properties": {
          "activated_height": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the finality providers who have signed the block at given height.",
        "type": "object",
        "required": [
          "votes"
        ],
        "properties": {
          "votes": {
            "type": "object",
            "required": [
              "height"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the signing info of a finality provider if any.",
        "type": "object",
        "required": [
          "signing_info"
        ],
        "properties": {
          "signing_info": {
            "type": "object",
            "required": [
              "btc_pk_hex"
            ],
            "properties": {
              "btc_pk_hex": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "activated_height": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "uint64",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "active_finality_providers": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ActiveFinalityProvidersResponse",
      "type": "object",
      "required": [
        "active_finality_providers"
      ],
      "properties": {
        "active_finality_providers": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "admin": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AdminResponse",
      "description": "Returned from Admin.query_admin()",
      "type": "object",
      "properties": {
        "admin": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "block": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "IndexedBlock",
      "description": "Represents the necessary metadata and finalization status of a block.",
      "type": "object",
      "required": [
        "app_hash",
        "finalized",
        "height"
      ],
      "properties": {
        "app_hash": {
          "description": "AppHash of the block.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "finalized": {
          "description": "Whether the IndexedBlock is finalised by 2/3 of the finality providers or not.",
          "type": "boolean"
        },
        "height": {
          "description": "Height of the block.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "blocks": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BlocksResponse",
      "type": "object",
      "required": [
        "blocks"
      ],
      "properties": {
        "blocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndexedBlock"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "IndexedBlock": {
          "description": "Represents the necessary metadata and finalization status of a block.",
          "type": "object",
          "required": [
            "app_hash",
            "finalized",
            "height"
          ],
          "properties": {
            "app_hash": {
              "description": "AppHash of the block.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "finalized": {
              "description": "Whether the IndexedBlock is finalised by 2/3 of the finality providers or not.",
              "type": "boolean"
            },
            "height": {
              "description": "Height of the block.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "description": "Config are Babylon-selectable BTC finality configuration",
      "type": "object",
      "required": [
        "babylon",
        "denom",
        "finality_activation_height",
        "jail_duration",
        "max_active_finality_providers",
        "min_pub_rand",
        "missed_blocks_window",
        "reward_interval",
        "staking"
      ],
      "properties": {
        "babylon": {
          "$ref": "#/definitions/Addr"
        },
        "denom": {
          "type": "string"
        },
        "finality_activation_height": {
          "description": "Block height at which the finality module will start to accept finality voting and the minimum allowed value for the public randomness commit start height.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "jail_duration": {
          "description": "Minimum period of time in seconds that a finality provider remains jailed (in case of being automatically jailed because of offline detection).",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "max_active_finality_providers": {
          "description": "Maximum number of active finality providers in the BTC staking protocol.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "min_pub_rand": {
          "description": "Minimum amount of public randomness each public randomness commitment should commit.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "missed_blocks_window": {
          "description": "Missed number of blocks an FP can be jailed for due to offline detection",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "reward_interval": {
          "description": "Number of blocks that define the rewards distribution interval",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "staking": {
          "$ref": "#/definitions/Addr"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "evidence": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EvidenceResponse",
      "type": "object",
      "properties": {
        "evidence": {
          "anyOf": [
            {
              "$ref": "#/definitions/Evidence"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Evidence": {
          "description": "Evidence is the evidence that a finality provider has signed finality signatures with correct public randomness on two conflicting Babylon headers",
          "type": "object",
          "required": [
            "block_height",
            "canonical_app_hash",
            "canonical_finality_sig",
            "fork_app_hash",
            "fork_finality_sig",
            "fp_btc_pk",
            "pub_rand",
            "signing_context"
          ],
          "properties": {
            "block_height": {
              "description": "Height of the conflicting blocks",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "canonical_app_hash": {
              "description": "AppHash of the canonical block",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "canonical_finality_sig": {
              "description": "Finality signature to the canonical block, where finality signature is an EOTS signature, i.e., the `s` in a Schnorr signature `(r, s)`. `r` is the public randomness already committed by the finality provider. Deserializes to `SchnorrEOTSSig`",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "fork_app_hash": {
              "description": "AppHash of the fork block",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "fork_finality_sig": {
              "description": "Finality signature to the fork block, where finality signature is an EOTS signature. Deserializes to `SchnorrEOTSSig`",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "fp_btc_pk": {
              "description": "BTC PK of the finality provider that casts this vote",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "pub_rand": {
              "description": "Public randomness the finality provider has committed to. Deserializes to `SchnorrPubRand`",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "signing_context": {
              "description": "Context in which the finality signatures were used. It must be hex encoded 32 bytes, of the sha256 hash of the context string",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "finality_provider_power": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FinalityProviderPowerResponse",
      "type": "object",
      "required": [
        "power"
      ],
      "properties": {
        "power": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "finality_signature": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FinalitySignatureResponse",
      "type": "object",
      "required": [
        "signature"
      ],
      "properties": {
        "signature": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        }
      },
      "additionalProperties": false
    },
    "first_pub_rand_commit": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_PubRandCommit",
      "anyOf": [
        {
          "$ref": "#/definitions/PubRandCommit"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "PubRandCommit": {
          "description": "Represents a commitment to a series of public randomness. Currently, the commitment is a root of a Merkle tree that includes a series of public randomness values",
          "type": "object",
          "required": [
            "commitment",
            "height",
            "num_pub_rand",
            "start_height"
          ],
          "properties": {
            "commitment": {
              "description": "Value of the commitment. Currently, it's the root of the Merkle tree constructed by the public randomness",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "height": {
              "description": "Height that the commit was submitted.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "num_pub_rand": {
              "description": "Number of committed public randomness.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "start_height": {
              "description": "Height of the first commitment.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "jailed_finality_providers": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "JailedFinalityProvidersResponse",
      "type": "object",
      "required": [
        "jailed_finality_providers"
      ],
      "properties": {
        "jailed_finality_providers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JailedFinalityProvider"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "JailedFinalityProvider": {
          "type": "object",
          "required": [
            "btc_pk_hex",
            "jailed_until"
          ],
          "properties": {
            "btc_pk_hex": {
              "type": "string"
            },
            "jailed_until": {
              "description": "Here zero means 'forever'",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "last_pub_rand_commit": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_PubRandCommit",
      "anyOf": [
        {
          "$ref": "#/definitions/PubRandCommit"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "PubRandCommit": {
          "description": "Represents a commitment to a series of public randomness. Currently, the commitment is a root of a Merkle tree that includes a series of public randomness values",
          "type": "object",
          "required": [
            "commitment",
            "height",
            "num_pub_rand",
            "start_height"
          ],
          "properties": {
            "commitment": {
              "description": "Value of the commitment. Currently, it's the root of the Merkle tree constructed by the public randomness",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "height": {
              "description": "Height that the commit was submitted.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "num_pub_rand": {
              "description": "Number of committed public randomness.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "start_height": {
              "description": "Height of the first commitment.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "pub_rand_commit": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_PubRandCommit",
      "type": "array",
      "items": {
        "$ref": "#/definitions/PubRandCommit"
      },
      "definitions": {
        "PubRandCommit": {
          "description": "Represents a commitment to a series of public randomness. Currently, the commitment is a root of a Merkle tree that includes a series of public randomness values",
          "type": "object",
          "required": [
            "commitment",
            "height",
            "num_pub_rand",
            "start_height"
          ],
          "properties": {
            "commitment": {
              "description": "Value of the commitment. Currently, it's the root of the Merkle tree constructed by the public randomness",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "height": {
              "description": "Height that the commit was submitted.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "num_pub_rand": {
              "description": "Number of committed public randomness.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "start_height": {
              "description": "Height of the first commitment.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "signing_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_SigningInfoResponse",
      "anyOf": [
        {
          "$ref": "#/definitions/SigningInfoResponse"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "SigningInfoResponse": {
          "type": "object",
          "required": [
            "fp_btc_pk_hex",
            "last_signed_height",
            "start_height"
          ],
          "properties": {
            "fp_btc_pk_hex": {
              "type": "string"
            },
            "jailed_until": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "last_signed_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "start_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "votes": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VotesResponse",
      "type": "object",
      "required": [
        "btc_pks"
      ],
      "properties": {
        "btc_pks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    }
  }
}
