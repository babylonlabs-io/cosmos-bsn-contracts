{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "EpochResponse",
  "description": "Babylon epoch.\n\nThis struct is for use in RPC requests and responses. It has convenience helpers to convert to and from the internal representation (`Epoch`). Adapted from `Epoch`.",
  "type": "object",
  "required": [
    "current_epoch_interval",
    "epoch_number",
    "first_block_height",
    "sealer_app_hash",
    "sealer_block_hash"
  ],
  "properties": {
    "current_epoch_interval": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "epoch_number": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "first_block_height": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "last_block_time": {
      "description": "The time of the last block in this epoch.\n\nBabylon needs to remember the last header's time of each epoch to complete unbonding validators/delegations when a previous epoch's checkpoint is finalised. The `last_block_time` field is nil in the epoch's beginning, and is set upon the end of this epoch",
      "anyOf": [
        {
          "$ref": "#/definitions/Timestamp"
        },
        {
          "type": "null"
        }
      ]
    },
    "sealer_app_hash": {
      "description": "sealer is the last block of the sealed epoch. `sealer_app_hash` points to the sealer but stored in the first header of the next epoch. Hex-encoded string",
      "type": "string"
    },
    "sealer_block_hash": {
      "description": "The hash of the sealer.\n\nThe validator set has generated a BLS multisig on the hash, i.e. the hash of the last block in the epoch in hex-encoded string.",
      "type": "string"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
